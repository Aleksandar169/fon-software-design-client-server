/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import controller.CustomerController;
import controller.PhoneController;
import controller.ReceiptController;
import controller.WorkerController;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Customer;
import model.Odo;
import model.Phone;
import model.Receipt;
import model.ReceiptItem;
import model.Worker;
import tablemodel.TableModel;

/**
 *
 * @author Lenovo
 */
public class ReceiptForm extends javax.swing.JFrame {

    List<Odo> customers = new ArrayList<>();
    List<Odo> workers = new ArrayList<>();
    List<Odo> phones = new ArrayList<>();
    List<Odo> receipts = new ArrayList<>();
    Worker w;

    /**
     * Creates new form ReceiptForm
     */
    public ReceiptForm() {
        initComponents();
        fillData();
        addListeners();
    }

    ReceiptForm(Worker w) {
        initComponents();
        fillData();
        addListeners();
        this.w = w;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtCustomer = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtWorker = new javax.swing.JTextField();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        cmbCustomer = new javax.swing.JComboBox<>();
        cmbWorker = new javax.swing.JComboBox<>();
        cmbPhone = new javax.swing.JComboBox<>();
        cmbId = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Receipt:");

        jLabel2.setText("Customer:");

        jLabel3.setText("Worker:");

        jLabel4.setText("Phone:");

        jLabel5.setText("IdReceipt:");

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCustomer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCustomerItemStateChanged(evt);
            }
        });
        cmbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerActionPerformed(evt);
            }
        });

        cmbWorker.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbWorker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWorkerItemStateChanged(evt);
            }
        });

        cmbPhone.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPhone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPhoneItemStateChanged(evt);
            }
        });

        cmbId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("X");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("X");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("X");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("X");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(409, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbWorker, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27)
                                        .addComponent(cmbId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(8, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWorker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbWorker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            if (jTable1.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(this, "You must select item from table!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            TableModel tm = (TableModel) jTable1.getModel();
            int i = jTable1.getSelectedRow();
            Receipt r = (Receipt) tm.getList().get(i);

           // r = ReceiptController.getInstance().getReceipt(r);
//            if (r == null) {
//                JOptionPane.showMessageDialog(this, "System  cannot find receipt", "Error", JOptionPane.ERROR_MESSAGE);
//
//            } else {
//                JOptionPane.showMessageDialog(this, "System found receipt", "Info", JOptionPane.INFORMATION_MESSAGE);
//
//            }

            System.out.println(r.getWorker());
            System.out.println(r.getItems());
            ReceiptAdd ra = new ReceiptAdd(this, r, w);
            ra.setVisible(true);
            ra.setLocationRelativeTo(null);
            this.setVisible(false);
               JOptionPane.showMessageDialog(this, "System found receipt", "Info", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void cmbCustomerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCustomerItemStateChanged
        // TODO add your handling code here:
        updateTable();
        TableModel tm = (TableModel) jTable1.getModel();
        
        // *******************************************************************************************
        //        ///////////////////++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        
//        if (tm.getList() != null && cmbCustomer.getSelectedIndex()!=-1) {
//
//            JOptionPane.showMessageDialog(rootPane, "System found the receipts according to the given criteria", "Info", JOptionPane.INFORMATION_MESSAGE);
//        } else {
//            JOptionPane.showMessageDialog(rootPane, "System cannot find the receipts according to the given criteria", "Error", JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_cmbCustomerItemStateChanged

    private void cmbWorkerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWorkerItemStateChanged
        // TODO add your handling code here:
        updateTable();
        TableModel tm = (TableModel) jTable1.getModel();
                // *******************************************************************************************
        //        ///////////////////++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//        if (tm.getList() != null && cmbWorker.getSelectedIndex()!=-1) {
//           JOptionPane.showMessageDialog(rootPane, "System found the receipts according to the given criteria", "Info", JOptionPane.INFORMATION_MESSAGE);
//        } else {
//            JOptionPane.showMessageDialog(rootPane, "System cannot find the receipts according to the given criteria", "Error", JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_cmbWorkerItemStateChanged

    private void cmbPhoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPhoneItemStateChanged
        // TODO add your handling code here:
        updateTable();
        TableModel tm = (TableModel) jTable1.getModel();
                // *******************************************************************************************
        //        ///////////////////++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//        if (tm.getList() != null && cmbPhone.getSelectedIndex()!=-1) {
//            JOptionPane.showMessageDialog(rootPane, "System found the receipts according to the given criteria", "Info", JOptionPane.INFORMATION_MESSAGE);
//        } else {
//            JOptionPane.showMessageDialog(rootPane, "System cannot find the receipts according to the given criteria", "Error", JOptionPane.ERROR_MESSAGE);
//        }

    }//GEN-LAST:event_cmbPhoneItemStateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:\
        cmbCustomer.setSelectedIndex(-1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        cmbWorker.setSelectedIndex(-1);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        cmbPhone.setSelectedIndex(-1);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        cmbId.setSelectedIndex(-1);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cmbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCustomerActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReceiptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReceiptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReceiptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReceiptForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReceiptForm().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbId;
    private javax.swing.JComboBox<String> cmbPhone;
    private javax.swing.JComboBox<String> cmbWorker;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtWorker;
    // End of variables declaration//GEN-END:variables

    public void updateTable() {
        Worker w = null;
        Customer c = null;
        Phone p = null;
        Receipt r = null;

        if (cmbWorker.getSelectedIndex() != -1) {
            w = (Worker) cmbWorker.getSelectedItem();
        }
        if (cmbCustomer.getSelectedIndex() != -1) {
            c = (Customer) cmbCustomer.getSelectedItem();
        }
        if (cmbPhone.getSelectedIndex() != -1) {
            p = (Phone) cmbPhone.getSelectedItem();
        }

        if (cmbId.getSelectedIndex() != -1) {
            r = (Receipt) cmbId.getSelectedItem();
        }
        ReceiptItem ri = new ReceiptItem(p);
        List<ReceiptItem> list = new ArrayList<>();
        list.add(ri);

        Receipt receipt = new Receipt(w, c, list);

        try {
            List<Odo> l = ReceiptController.getInstance().searchReceipt(receipt);
            jTable1.setModel(new TableModel(l));
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void updateWrk() {
        try {
            workers = WorkerController.getInstance().searchWorker(txtWorker.getText());
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        cmbWorker.setModel(new DefaultComboBoxModel(workers.toArray()));
        cmbWorker.setSelectedIndex(-1);

    }

    public void updateCust() {
        try {
            customers = CustomerController.getInstance().searchCustomer(txtCustomer.getText());
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        cmbCustomer.setModel(new DefaultComboBoxModel(customers.toArray()));
        cmbCustomer.setSelectedIndex(-1);

    }

    public void updatePhone() {

        try {
            phones = PhoneController.getInstance().searchPhone(txtPhone.getText());
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmbPhone.setModel(new DefaultComboBoxModel(phones.toArray()));
        cmbPhone.setSelectedIndex(-1);

    }

    public void updateId() {

        int id = Integer.parseInt(txtId.getText());
        Receipt r = new Receipt(id);
        r.setCondition(id + "");
        try {
            receipts = ReceiptController.getInstance().searchReceipt(r);
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        cmbPhone.setModel(new DefaultComboBoxModel(receipts.toArray()));
        cmbId.setSelectedIndex(-1);

    }

    private void addListeners() {
        txtWorker.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateWrk();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateWrk();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

        txtCustomer.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateCust();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateCust();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
        txtPhone.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updatePhone();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updatePhone();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });
        txtId.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateId();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateId();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            }
        });

    }

    private void fillData() {

        try {
            receipts = ReceiptController.getInstance().getReceipts();
            cmbId.setModel(new DefaultComboBoxModel(receipts.toArray()));
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            customers = CustomerController.getInstance().getCustomers();
            cmbCustomer.setModel(new DefaultComboBoxModel(customers.toArray()));
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            workers = WorkerController.getInstance().getWorkers();
            cmbWorker.setModel(new DefaultComboBoxModel(workers.toArray()));
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            phones = PhoneController.getInstance().getPhones();
            cmbPhone.setModel(new DefaultComboBoxModel(phones.toArray()));
        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            List<Odo> l = ReceiptController.getInstance().getReceipts();
            jTable1.setModel(new TableModel(receipts));

        } catch (Exception ex) {
            Logger.getLogger(ReceiptForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        cmbCustomer.setSelectedIndex(-1);
        cmbWorker.setSelectedIndex(-1);
        cmbPhone.setSelectedIndex(-1);
        cmbId.setSelectedIndex(-1);

    }
}
